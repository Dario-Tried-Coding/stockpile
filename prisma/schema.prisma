generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user authentication -------------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  isAdmin Boolean @default(false)

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

// user authorization -------------------------------------
enum Workarea {
  VERSILIA
}

enum WorkspaceType {
  SHOP
  PRODUCTION
}

model Workspace {
  id   String @id @default(cuid())
  name String @unique

  type     WorkspaceType
  workarea Workarea

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rawMaterials RawMaterialItem[]
  products     ProductItem[]
  orders       Order[]
}

// core models -------------------------------------
enum Unit {
  KG
  L
  PIECE
  ENVELOPE
}

model RawMaterial {
  id   String @id @default(cuid())
  name String @unique
  unit Unit

  rawMaterialItems RawMaterialItem[]
  recepyItems      RecepyItem[]
}

model RawMaterialItem {
  id String @id @default(cuid())

  rawMaterialId String
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])

  quantity   Float
  expiryDate DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id   String @id @default(cuid())
  name String @unique
  unit Unit

  productItems ProductItem[]
  orderItems   OrderItem[]

  recepy Recepy?
}

model ProductItem {
  id String @id @default(cuid())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity   Float
  expiryDate DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recepy {
  id String @id @default(cuid())

  productId String  @unique
  product   Product @relation(fields: [productId], references: [id])

  recepyItems RecepyItem[]
}

model RecepyItem {
  id String @id @default(cuid())

  recepyId String
  recepy   Recepy @relation(fields: [recepyId], references: [id])

  rawMaterialId String
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])

  quantity Float
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id String @id @default(cuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
